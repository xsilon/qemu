/*
 * Inline register bitfield accessor functions
 * Processor Interface Version: 1
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED USING THE REGISTER MAP PROJECT.
 * PLEASE DO NOT EDIT.
 *
 * Martin Townsend >martin.townsend@xsilon.com<
 * Copyright Xsilon Limited 2014.
 */

#ifndef _XSILON_REGMAP_AUTOGENERATED_QEMU_HANADU_BITFIELD_ACCESOR_H
#define _XSILON_REGMAP_AUTOGENERATED_QEMU_HANADU_BITFIELD_ACCESOR_H

/* _________________________________ Register Bitfield Accessor Inline Functions
 */


/* ________________________ get accessor functions
 */

static inline bool 
han_trxm_tx_lower_mac_busy_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_tx_busy_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_tx_use_ram_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_tx_mem_bank_select_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_tx_start_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_tx_enable_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_tx_pga_gain0_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint16_t
han_trxm_tx_psdu_len0_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_tx_rep_code0_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint16_t
han_trxm_tx_hdr_extra0_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_tx_pga_gain1_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint16_t
han_trxm_tx_psdu_len1_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_tx_rep_code1_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint16_t
han_trxm_tx_hdr_extra1_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline int8_t
han_trxm_rx_acg_max_db_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline int8_t
han_trxm_rx_acg_lower_thresh_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline int8_t
han_trxm_rx_acg_set_point_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_manual_membank_sel_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_payload_fail_crc_intr_en_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_clear_membank_oflow_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_clear_membank_full3_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_clear_membank_full2_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_clear_membank_full1_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_clear_membank_full0_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_enable_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_hdr_reprate_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline int8_t
han_trxm_rx_ed_threshold_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_cca_auto_threshold_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline int8_t
han_trxm_rx_hp_auto_threshold_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_mem_bank_next_to_process_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint16_t
han_trxm_rx_psdulen0_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_repcode0_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint16_t
han_trxm_rx_psdulen1_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_repcode1_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint16_t
han_trxm_rx_psdulen2_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_repcode2_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint16_t
han_trxm_rx_psdulen3_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_repcode3_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_proc_fifo_wr_level_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_proc_fifo_rd_level_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_nextbuf_fifo_wr_level_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline uint8_t
han_trxm_rx_nextbuf_fifo_rd_level_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline int8_t
han_trxm_rx_rssi_latched_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_mem_bank_fifo_empty_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_mem_bank_fifo_full_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_mem_bank_overflow_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_mem_bank_full3_flag_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_mem_bank_full2_flag_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_mem_bank_full1_flag_get(struct han_trxm_dev *s) __attribute__((always_inline));

static inline bool 
han_trxm_rx_mem_bank_full0_flag_get(struct han_trxm_dev *s) __attribute__((always_inline));


/* ________________________ set accessor functions
 */

static inline void 
han_trxm_tx_lower_mac_busy_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_tx_busy_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_tx_use_ram_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void
han_trxm_tx_mem_bank_select_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void 
han_trxm_tx_start_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_tx_enable_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void
han_trxm_tx_pga_gain0_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_tx_psdu_len0_set(struct han_trxm_dev *s, uint16_t value) __attribute__((always_inline));

static inline void
han_trxm_tx_rep_code0_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_tx_hdr_extra0_set(struct han_trxm_dev *s, uint16_t value) __attribute__((always_inline));

static inline void
han_trxm_tx_pga_gain1_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_tx_psdu_len1_set(struct han_trxm_dev *s, uint16_t value) __attribute__((always_inline));

static inline void
han_trxm_tx_rep_code1_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_tx_hdr_extra1_set(struct han_trxm_dev *s, uint16_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_acg_max_db_set(struct han_trxm_dev *s, int8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_acg_lower_thresh_set(struct han_trxm_dev *s, int8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_acg_set_point_set(struct han_trxm_dev *s, int8_t value) __attribute__((always_inline));

static inline void 
han_trxm_rx_manual_membank_sel_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_payload_fail_crc_intr_en_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_clear_membank_oflow_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_clear_membank_full3_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_clear_membank_full2_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_clear_membank_full1_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_clear_membank_full0_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_enable_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void
han_trxm_rx_hdr_reprate_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_ed_threshold_set(struct han_trxm_dev *s, int8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_cca_auto_threshold_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_hp_auto_threshold_set(struct han_trxm_dev *s, int8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_mem_bank_next_to_process_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_psdulen0_set(struct han_trxm_dev *s, uint16_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_repcode0_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_psdulen1_set(struct han_trxm_dev *s, uint16_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_repcode1_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_psdulen2_set(struct han_trxm_dev *s, uint16_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_repcode2_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_psdulen3_set(struct han_trxm_dev *s, uint16_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_repcode3_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_proc_fifo_wr_level_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_proc_fifo_rd_level_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_nextbuf_fifo_wr_level_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_nextbuf_fifo_rd_level_set(struct han_trxm_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_trxm_rx_rssi_latched_set(struct han_trxm_dev *s, int8_t value) __attribute__((always_inline));

static inline void 
han_trxm_rx_mem_bank_fifo_empty_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_mem_bank_fifo_full_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_mem_bank_overflow_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_mem_bank_full3_flag_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_mem_bank_full2_flag_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_mem_bank_full1_flag_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_trxm_rx_mem_bank_full0_flag_set(struct han_trxm_dev *s, bool value) __attribute__((always_inline));


/* ________________________ get accessor functions
 */

static inline uint8_t
han_mac_mac_timeout_strategy_get(struct han_mac_dev *s) __attribute__((always_inline));

static inline uint8_t
han_mac_mac_max_csma_backoffs_get(struct han_mac_dev *s) __attribute__((always_inline));

static inline uint8_t
han_mac_mac_min_be_get(struct han_mac_dev *s) __attribute__((always_inline));

static inline uint8_t
han_mac_mac_max_be_get(struct han_mac_dev *s) __attribute__((always_inline));

static inline bool 
han_mac_mac_csma_ign_rx_busy_get(struct han_mac_dev *s) __attribute__((always_inline));

static inline bool 
han_mac_mac_ack_en_get(struct han_mac_dev *s) __attribute__((always_inline));

static inline bool 
han_mac_lower_mac_reset_get(struct han_mac_dev *s) __attribute__((always_inline));

static inline bool 
han_mac_lower_mac_bypass_get(struct han_mac_dev *s) __attribute__((always_inline));


/* ________________________ set accessor functions
 */

static inline void
han_mac_mac_timeout_strategy_set(struct han_mac_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_mac_mac_max_csma_backoffs_set(struct han_mac_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_mac_mac_min_be_set(struct han_mac_dev *s, uint8_t value) __attribute__((always_inline));

static inline void
han_mac_mac_max_be_set(struct han_mac_dev *s, uint8_t value) __attribute__((always_inline));

static inline void 
han_mac_mac_csma_ign_rx_busy_set(struct han_mac_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_mac_mac_ack_en_set(struct han_mac_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_mac_lower_mac_reset_set(struct han_mac_dev *s, bool value) __attribute__((always_inline));

static inline void 
han_mac_lower_mac_bypass_set(struct han_mac_dev *s, bool value) __attribute__((always_inline));


/* ________________________ get accessor functions
 */


/* ________________________ set accessor functions
 */


/* ________________________ get accessor functions
 */


/* ________________________ set accessor functions
 */


/* ________________________ get accessor functions
 */


/* ________________________ set accessor functions
 */

/* ________________________ get accessor functions
 */

static inline bool 
han_trxm_tx_lower_mac_busy_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_tx_ctrl & (1 << MAC_LOWER_BUSY_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_tx_busy_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_tx_ctrl & (1 << TX_BUSY_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_tx_use_ram_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_tx_ctrl & (1 << USER_TX_RAM_SHIFT)) ? true : false;
}

static inline uint8_t
han_trxm_tx_mem_bank_select_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_tx_ctrl & TX_MEMBANK_SEL_MASK) >> TX_MEMBANK_SEL_SHIFT);
    return value;
}

static inline bool 
han_trxm_tx_start_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_tx_ctrl & (1 << TX_START_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_tx_enable_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_tx_ctrl & (1 << TX_ENABLE_SHIFT)) ? true : false;
}

static inline uint8_t
han_trxm_tx_pga_gain0_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_tx_hwbuf0_rc_psdulen & TX_PGA_GAIN_MASK) >> TX_PGA_GAIN_SHIFT);
    return value;
}

static inline uint16_t
han_trxm_tx_psdu_len0_get(struct han_trxm_dev *s)
{
    uint16_t value;

    value = (uint16_t)((s->regs.trx_tx_hwbuf0_rc_psdulen & TX_PSDU_LENGTH_MASK) >> TX_PSDU_LENGTH_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_tx_rep_code0_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_tx_hwbuf0_rc_psdulen & TX_REP_CODE_MASK) >> TX_REP_CODE_SHIFT);
    return value;
}

static inline uint16_t
han_trxm_tx_hdr_extra0_get(struct han_trxm_dev *s)
{
    uint16_t value;

    value = (uint16_t)s->regs.trx_tx_hwbuf0_xtra;
    return value;
}

static inline uint8_t
han_trxm_tx_pga_gain1_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_tx_hwbuf1_rc_psdulen & TX_PGA_GAIN_MASK) >> TX_PGA_GAIN_SHIFT);
    return value;
}

static inline uint16_t
han_trxm_tx_psdu_len1_get(struct han_trxm_dev *s)
{
    uint16_t value;

    value = (uint16_t)((s->regs.trx_tx_hwbuf1_rc_psdulen & TX_PSDU_LENGTH_MASK) >> TX_PSDU_LENGTH_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_tx_rep_code1_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_tx_hwbuf1_rc_psdulen & TX_REP_CODE_MASK) >> TX_REP_CODE_SHIFT);
    return value;
}

static inline uint16_t
han_trxm_tx_hdr_extra1_get(struct han_trxm_dev *s)
{
    uint16_t value;

    value = (uint16_t)s->regs.trx_tx_hwbuf1_xtra;
    return value;
}

static inline int8_t
han_trxm_rx_acg_max_db_get(struct han_trxm_dev *s)
{
    int8_t value;

    value = (int8_t)((s->regs.trx_rx_control & AGC_MAXDB_MASK) >> AGC_MAXDB_SHIFT);
    return value;
}

static inline int8_t
han_trxm_rx_acg_lower_thresh_get(struct han_trxm_dev *s)
{
    int8_t value;

    value = (int8_t)((s->regs.trx_rx_control & AGC_LOWERTHRESH_MASK) >> AGC_LOWERTHRESH_SHIFT);
    return value;
}

static inline int8_t
han_trxm_rx_acg_set_point_get(struct han_trxm_dev *s)
{
    int8_t value;

    value = (int8_t)((s->regs.trx_rx_control & AGC_SETPOINT_MASK) >> AGC_SETPOINT_SHIFT);
    return value;
}

static inline bool 
han_trxm_rx_manual_membank_sel_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_rx_control & (1 << AGC_MANUAL_MEMSEL_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_payload_fail_crc_intr_en_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_rx_control & (1 << PAYLOAD_CRCFAIL_INTR_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_clear_membank_oflow_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_rx_control & (1 << CLEAR_MEMBANK_OFLOW_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_clear_membank_full3_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_rx_control & (1 << CLEAR_MEM_FULL_FLAG_BANK3_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_clear_membank_full2_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_rx_control & (1 << CLEAR_MEM_FULL_FLAG_BANK2_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_clear_membank_full1_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_rx_control & (1 << CLEAR_MEM_FULL_FLAG_BANK1_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_clear_membank_full0_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_rx_control & (1 << CLEAR_MEM_FULL_FLAG_BANK0_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_enable_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_rx_control & (1 << RXM_ENABLE_SHIFT)) ? true : false;
}

static inline uint8_t
han_trxm_rx_hdr_reprate_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)s->regs.trx_rx_hdr_rep_rate;
    return value;
}

static inline int8_t
han_trxm_rx_ed_threshold_get(struct han_trxm_dev *s)
{
    int8_t value;

    value = (int8_t)((s->regs.trx_rx_thresholds & ED_THRESHOLD_MASK) >> ED_THRESHOLD_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_cca_auto_threshold_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_rx_thresholds & CCA_THRESHOLD_MASK) >> CCA_THRESHOLD_SHIFT);
    return value;
}

static inline int8_t
han_trxm_rx_hp_auto_threshold_get(struct han_trxm_dev *s)
{
    int8_t value;

    value = (int8_t)((s->regs.trx_rx_thresholds & HP_THRESHOLD_MASK) >> HP_THRESHOLD_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_mem_bank_next_to_process_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)s->regs.trx_rx_next_membank_to_proc;
    return value;
}

static inline uint16_t
han_trxm_rx_psdulen0_get(struct han_trxm_dev *s)
{
    uint16_t value;

    value = (uint16_t)((s->regs.trx_rx_buf0_rc_psdulen & RX_PSDU_LENGTH_MASK) >> RX_PSDU_LENGTH_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_repcode0_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_rx_buf0_rc_psdulen & RX_REP_CODE_MASK) >> RX_REP_CODE_SHIFT);
    return value;
}

static inline uint16_t
han_trxm_rx_psdulen1_get(struct han_trxm_dev *s)
{
    uint16_t value;

    value = (uint16_t)((s->regs.trx_rx_buf1_rc_psdulen & RX_PSDU_LENGTH_MASK) >> RX_PSDU_LENGTH_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_repcode1_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_rx_buf1_rc_psdulen & RX_REP_CODE_MASK) >> RX_REP_CODE_SHIFT);
    return value;
}

static inline uint16_t
han_trxm_rx_psdulen2_get(struct han_trxm_dev *s)
{
    uint16_t value;

    value = (uint16_t)((s->regs.trx_rx_buf2_rc_psdulen & RX_PSDU_LENGTH_MASK) >> RX_PSDU_LENGTH_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_repcode2_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_rx_buf2_rc_psdulen & RX_REP_CODE_MASK) >> RX_REP_CODE_SHIFT);
    return value;
}

static inline uint16_t
han_trxm_rx_psdulen3_get(struct han_trxm_dev *s)
{
    uint16_t value;

    value = (uint16_t)((s->regs.trx_rx_buf3_rc_psdulen & RX_PSDU_LENGTH_MASK) >> RX_PSDU_LENGTH_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_repcode3_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_rx_buf3_rc_psdulen & RX_REP_CODE_MASK) >> RX_REP_CODE_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_proc_fifo_wr_level_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_rx_fifo_levels & PROC_FIFO_WR_LEVEL_MASK) >> PROC_FIFO_WR_LEVEL_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_proc_fifo_rd_level_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_rx_fifo_levels & PROC_FIFO_RD_LEVEL_MASK) >> PROC_FIFO_RD_LEVEL_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_nextbuf_fifo_wr_level_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_rx_fifo_levels & NEXTBUF_FIFO_WR_LEVEL_MASK) >> NEXTBUF_FIFO_WR_LEVEL_SHIFT);
    return value;
}

static inline uint8_t
han_trxm_rx_nextbuf_fifo_rd_level_get(struct han_trxm_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.trx_rx_fifo_levels & NEXTBUF_FIFO_RD_LEVEL_MASK) >> NEXTBUF_FIFO_RD_LEVEL_SHIFT);
    return value;
}

static inline int8_t
han_trxm_rx_rssi_latched_get(struct han_trxm_dev *s)
{
    int8_t value;

    value = (int8_t)((s->regs.trx_pga_gain_cca_flags & RX_RSSI_LATCHED_MASK) >> RX_RSSI_LATCHED_SHIFT);
    return value;
}

static inline bool 
han_trxm_rx_mem_bank_fifo_empty_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_membank_fifo_flags_rssi_tx_power & (1 << RX_FIFO_EMPTY_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_mem_bank_fifo_full_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_membank_fifo_flags_rssi_tx_power & (1 << RX_FIFO_FULL_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_mem_bank_overflow_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_membank_fifo_flags_rssi_tx_power & (1 << RX_MEMBANK_OFLOW_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_mem_bank_full3_flag_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_membank_fifo_flags_rssi_tx_power & (1 << MEMBANK3_FULL_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_mem_bank_full2_flag_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_membank_fifo_flags_rssi_tx_power & (1 << MEMBANK2_FULL_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_mem_bank_full1_flag_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_membank_fifo_flags_rssi_tx_power & (1 << MEMBANK1_FULL_SHIFT)) ? true : false;
}

static inline bool 
han_trxm_rx_mem_bank_full0_flag_get(struct han_trxm_dev *s)
{
    return (s->regs.trx_membank_fifo_flags_rssi_tx_power & (1 << MEMBANK0_FULL_SHIFT)) ? true : false;
}

/* ________________________ set accessor functions
 */


static inline void
han_trxm_tx_lower_mac_busy_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_tx_ctrl;
    reg_val &= ~MAC_LOWER_BUSY_MASK;
    if(value)
	    reg_val |= ((1 << MAC_LOWER_BUSY_SHIFT) & MAC_LOWER_BUSY_MASK);
    s->regs.trx_tx_ctrl = reg_val;
}


static inline void
han_trxm_tx_busy_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_tx_ctrl;
    reg_val &= ~TX_BUSY_MASK;
    if(value)
	    reg_val |= ((1 << TX_BUSY_SHIFT) & TX_BUSY_MASK);
    s->regs.trx_tx_ctrl = reg_val;
}


static inline void
han_trxm_tx_use_ram_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_tx_ctrl;
    reg_val &= ~USER_TX_RAM_MASK;
    if(value)
	    reg_val |= ((1 << USER_TX_RAM_SHIFT) & USER_TX_RAM_MASK);
    s->regs.trx_tx_ctrl = reg_val;
}

static inline void
han_trxm_tx_mem_bank_select_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_tx_ctrl;
    reg_val &= ~TX_MEMBANK_SEL_MASK;
    reg_val |= ((value << TX_MEMBANK_SEL_SHIFT) & TX_MEMBANK_SEL_MASK);
    s->regs.trx_tx_ctrl = reg_val;
}


static inline void
han_trxm_tx_start_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_tx_ctrl;
    reg_val &= ~TX_START_MASK;
    if(value)
	    reg_val |= ((1 << TX_START_SHIFT) & TX_START_MASK);
    s->regs.trx_tx_ctrl = reg_val;
}


static inline void
han_trxm_tx_enable_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_tx_ctrl;
    reg_val &= ~TX_ENABLE_MASK;
    if(value)
	    reg_val |= ((1 << TX_ENABLE_SHIFT) & TX_ENABLE_MASK);
    s->regs.trx_tx_ctrl = reg_val;
}

static inline void
han_trxm_tx_pga_gain0_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_tx_hwbuf0_rc_psdulen;
    reg_val &= ~TX_PGA_GAIN_MASK;
    reg_val |= ((value << TX_PGA_GAIN_SHIFT) & TX_PGA_GAIN_MASK);
    s->regs.trx_tx_hwbuf0_rc_psdulen = reg_val;
}

static inline void
han_trxm_tx_psdu_len0_set(struct han_trxm_dev *s, uint16_t value)
{
    uint32_t reg_val = s->regs.trx_tx_hwbuf0_rc_psdulen;
    reg_val &= ~TX_PSDU_LENGTH_MASK;
    reg_val |= ((value << TX_PSDU_LENGTH_SHIFT) & TX_PSDU_LENGTH_MASK);
    s->regs.trx_tx_hwbuf0_rc_psdulen = reg_val;
}

static inline void
han_trxm_tx_rep_code0_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_tx_hwbuf0_rc_psdulen;
    reg_val &= ~TX_REP_CODE_MASK;
    reg_val |= ((value << TX_REP_CODE_SHIFT) & TX_REP_CODE_MASK);
    s->regs.trx_tx_hwbuf0_rc_psdulen = reg_val;
}

static inline void
han_trxm_tx_hdr_extra0_set(struct han_trxm_dev *s, uint16_t value)
{
    s->regs.trx_tx_hwbuf0_xtra = value;
}

static inline void
han_trxm_tx_pga_gain1_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_tx_hwbuf1_rc_psdulen;
    reg_val &= ~TX_PGA_GAIN_MASK;
    reg_val |= ((value << TX_PGA_GAIN_SHIFT) & TX_PGA_GAIN_MASK);
    s->regs.trx_tx_hwbuf1_rc_psdulen = reg_val;
}

static inline void
han_trxm_tx_psdu_len1_set(struct han_trxm_dev *s, uint16_t value)
{
    uint32_t reg_val = s->regs.trx_tx_hwbuf1_rc_psdulen;
    reg_val &= ~TX_PSDU_LENGTH_MASK;
    reg_val |= ((value << TX_PSDU_LENGTH_SHIFT) & TX_PSDU_LENGTH_MASK);
    s->regs.trx_tx_hwbuf1_rc_psdulen = reg_val;
}

static inline void
han_trxm_tx_rep_code1_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_tx_hwbuf1_rc_psdulen;
    reg_val &= ~TX_REP_CODE_MASK;
    reg_val |= ((value << TX_REP_CODE_SHIFT) & TX_REP_CODE_MASK);
    s->regs.trx_tx_hwbuf1_rc_psdulen = reg_val;
}

static inline void
han_trxm_tx_hdr_extra1_set(struct han_trxm_dev *s, uint16_t value)
{
    s->regs.trx_tx_hwbuf1_xtra = value;
}

static inline void
han_trxm_rx_acg_max_db_set(struct han_trxm_dev *s, int8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~AGC_MAXDB_MASK;
    reg_val |= ((value << AGC_MAXDB_SHIFT) & AGC_MAXDB_MASK);
    s->regs.trx_rx_control = reg_val;
}

static inline void
han_trxm_rx_acg_lower_thresh_set(struct han_trxm_dev *s, int8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~AGC_LOWERTHRESH_MASK;
    reg_val |= ((value << AGC_LOWERTHRESH_SHIFT) & AGC_LOWERTHRESH_MASK);
    s->regs.trx_rx_control = reg_val;
}

static inline void
han_trxm_rx_acg_set_point_set(struct han_trxm_dev *s, int8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~AGC_SETPOINT_MASK;
    reg_val |= ((value << AGC_SETPOINT_SHIFT) & AGC_SETPOINT_MASK);
    s->regs.trx_rx_control = reg_val;
}


static inline void
han_trxm_rx_manual_membank_sel_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~AGC_MANUAL_MEMSEL_MASK;
    if(value)
	    reg_val |= ((1 << AGC_MANUAL_MEMSEL_SHIFT) & AGC_MANUAL_MEMSEL_MASK);
    s->regs.trx_rx_control = reg_val;
}


static inline void
han_trxm_rx_payload_fail_crc_intr_en_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~PAYLOAD_CRCFAIL_INTR_MASK;
    if(value)
	    reg_val |= ((1 << PAYLOAD_CRCFAIL_INTR_SHIFT) & PAYLOAD_CRCFAIL_INTR_MASK);
    s->regs.trx_rx_control = reg_val;
}


static inline void
han_trxm_rx_clear_membank_oflow_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~CLEAR_MEMBANK_OFLOW_MASK;
    if(value)
	    reg_val |= ((1 << CLEAR_MEMBANK_OFLOW_SHIFT) & CLEAR_MEMBANK_OFLOW_MASK);
    s->regs.trx_rx_control = reg_val;
}


static inline void
han_trxm_rx_clear_membank_full3_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~CLEAR_MEM_FULL_FLAG_BANK3_MASK;
    if(value)
	    reg_val |= ((1 << CLEAR_MEM_FULL_FLAG_BANK3_SHIFT) & CLEAR_MEM_FULL_FLAG_BANK3_MASK);
    s->regs.trx_rx_control = reg_val;
}


static inline void
han_trxm_rx_clear_membank_full2_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~CLEAR_MEM_FULL_FLAG_BANK2_MASK;
    if(value)
	    reg_val |= ((1 << CLEAR_MEM_FULL_FLAG_BANK2_SHIFT) & CLEAR_MEM_FULL_FLAG_BANK2_MASK);
    s->regs.trx_rx_control = reg_val;
}


static inline void
han_trxm_rx_clear_membank_full1_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~CLEAR_MEM_FULL_FLAG_BANK1_MASK;
    if(value)
	    reg_val |= ((1 << CLEAR_MEM_FULL_FLAG_BANK1_SHIFT) & CLEAR_MEM_FULL_FLAG_BANK1_MASK);
    s->regs.trx_rx_control = reg_val;
}


static inline void
han_trxm_rx_clear_membank_full0_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~CLEAR_MEM_FULL_FLAG_BANK0_MASK;
    if(value)
	    reg_val |= ((1 << CLEAR_MEM_FULL_FLAG_BANK0_SHIFT) & CLEAR_MEM_FULL_FLAG_BANK0_MASK);
    s->regs.trx_rx_control = reg_val;
}


static inline void
han_trxm_rx_enable_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_rx_control;
    reg_val &= ~RXM_ENABLE_MASK;
    if(value)
	    reg_val |= ((1 << RXM_ENABLE_SHIFT) & RXM_ENABLE_MASK);
    s->regs.trx_rx_control = reg_val;
}

static inline void
han_trxm_rx_hdr_reprate_set(struct han_trxm_dev *s, uint8_t value)
{
    s->regs.trx_rx_hdr_rep_rate = value;
}

static inline void
han_trxm_rx_ed_threshold_set(struct han_trxm_dev *s, int8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_thresholds;
    reg_val &= ~ED_THRESHOLD_MASK;
    reg_val |= ((value << ED_THRESHOLD_SHIFT) & ED_THRESHOLD_MASK);
    s->regs.trx_rx_thresholds = reg_val;
}

static inline void
han_trxm_rx_cca_auto_threshold_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_thresholds;
    reg_val &= ~CCA_THRESHOLD_MASK;
    reg_val |= ((value << CCA_THRESHOLD_SHIFT) & CCA_THRESHOLD_MASK);
    s->regs.trx_rx_thresholds = reg_val;
}

static inline void
han_trxm_rx_hp_auto_threshold_set(struct han_trxm_dev *s, int8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_thresholds;
    reg_val &= ~HP_THRESHOLD_MASK;
    reg_val |= ((value << HP_THRESHOLD_SHIFT) & HP_THRESHOLD_MASK);
    s->regs.trx_rx_thresholds = reg_val;
}

static inline void
han_trxm_rx_mem_bank_next_to_process_set(struct han_trxm_dev *s, uint8_t value)
{
    s->regs.trx_rx_next_membank_to_proc = value;
}

static inline void
han_trxm_rx_psdulen0_set(struct han_trxm_dev *s, uint16_t value)
{
    uint32_t reg_val = s->regs.trx_rx_buf0_rc_psdulen;
    reg_val &= ~RX_PSDU_LENGTH_MASK;
    reg_val |= ((value << RX_PSDU_LENGTH_SHIFT) & RX_PSDU_LENGTH_MASK);
    s->regs.trx_rx_buf0_rc_psdulen = reg_val;
}

static inline void
han_trxm_rx_repcode0_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_buf0_rc_psdulen;
    reg_val &= ~RX_REP_CODE_MASK;
    reg_val |= ((value << RX_REP_CODE_SHIFT) & RX_REP_CODE_MASK);
    s->regs.trx_rx_buf0_rc_psdulen = reg_val;
}

static inline void
han_trxm_rx_psdulen1_set(struct han_trxm_dev *s, uint16_t value)
{
    uint32_t reg_val = s->regs.trx_rx_buf1_rc_psdulen;
    reg_val &= ~RX_PSDU_LENGTH_MASK;
    reg_val |= ((value << RX_PSDU_LENGTH_SHIFT) & RX_PSDU_LENGTH_MASK);
    s->regs.trx_rx_buf1_rc_psdulen = reg_val;
}

static inline void
han_trxm_rx_repcode1_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_buf1_rc_psdulen;
    reg_val &= ~RX_REP_CODE_MASK;
    reg_val |= ((value << RX_REP_CODE_SHIFT) & RX_REP_CODE_MASK);
    s->regs.trx_rx_buf1_rc_psdulen = reg_val;
}

static inline void
han_trxm_rx_psdulen2_set(struct han_trxm_dev *s, uint16_t value)
{
    uint32_t reg_val = s->regs.trx_rx_buf2_rc_psdulen;
    reg_val &= ~RX_PSDU_LENGTH_MASK;
    reg_val |= ((value << RX_PSDU_LENGTH_SHIFT) & RX_PSDU_LENGTH_MASK);
    s->regs.trx_rx_buf2_rc_psdulen = reg_val;
}

static inline void
han_trxm_rx_repcode2_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_buf2_rc_psdulen;
    reg_val &= ~RX_REP_CODE_MASK;
    reg_val |= ((value << RX_REP_CODE_SHIFT) & RX_REP_CODE_MASK);
    s->regs.trx_rx_buf2_rc_psdulen = reg_val;
}

static inline void
han_trxm_rx_psdulen3_set(struct han_trxm_dev *s, uint16_t value)
{
    uint32_t reg_val = s->regs.trx_rx_buf3_rc_psdulen;
    reg_val &= ~RX_PSDU_LENGTH_MASK;
    reg_val |= ((value << RX_PSDU_LENGTH_SHIFT) & RX_PSDU_LENGTH_MASK);
    s->regs.trx_rx_buf3_rc_psdulen = reg_val;
}

static inline void
han_trxm_rx_repcode3_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_buf3_rc_psdulen;
    reg_val &= ~RX_REP_CODE_MASK;
    reg_val |= ((value << RX_REP_CODE_SHIFT) & RX_REP_CODE_MASK);
    s->regs.trx_rx_buf3_rc_psdulen = reg_val;
}

static inline void
han_trxm_rx_proc_fifo_wr_level_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_fifo_levels;
    reg_val &= ~PROC_FIFO_WR_LEVEL_MASK;
    reg_val |= ((value << PROC_FIFO_WR_LEVEL_SHIFT) & PROC_FIFO_WR_LEVEL_MASK);
    s->regs.trx_rx_fifo_levels = reg_val;
}

static inline void
han_trxm_rx_proc_fifo_rd_level_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_fifo_levels;
    reg_val &= ~PROC_FIFO_RD_LEVEL_MASK;
    reg_val |= ((value << PROC_FIFO_RD_LEVEL_SHIFT) & PROC_FIFO_RD_LEVEL_MASK);
    s->regs.trx_rx_fifo_levels = reg_val;
}

static inline void
han_trxm_rx_nextbuf_fifo_wr_level_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_fifo_levels;
    reg_val &= ~NEXTBUF_FIFO_WR_LEVEL_MASK;
    reg_val |= ((value << NEXTBUF_FIFO_WR_LEVEL_SHIFT) & NEXTBUF_FIFO_WR_LEVEL_MASK);
    s->regs.trx_rx_fifo_levels = reg_val;
}

static inline void
han_trxm_rx_nextbuf_fifo_rd_level_set(struct han_trxm_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.trx_rx_fifo_levels;
    reg_val &= ~NEXTBUF_FIFO_RD_LEVEL_MASK;
    reg_val |= ((value << NEXTBUF_FIFO_RD_LEVEL_SHIFT) & NEXTBUF_FIFO_RD_LEVEL_MASK);
    s->regs.trx_rx_fifo_levels = reg_val;
}

static inline void
han_trxm_rx_rssi_latched_set(struct han_trxm_dev *s, int8_t value)
{
    uint32_t reg_val = s->regs.trx_pga_gain_cca_flags;
    reg_val &= ~RX_RSSI_LATCHED_MASK;
    reg_val |= ((value << RX_RSSI_LATCHED_SHIFT) & RX_RSSI_LATCHED_MASK);
    s->regs.trx_pga_gain_cca_flags = reg_val;
}


static inline void
han_trxm_rx_mem_bank_fifo_empty_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_membank_fifo_flags_rssi_tx_power;
    reg_val &= ~RX_FIFO_EMPTY_MASK;
    if(value)
	    reg_val |= ((1 << RX_FIFO_EMPTY_SHIFT) & RX_FIFO_EMPTY_MASK);
    s->regs.trx_membank_fifo_flags_rssi_tx_power = reg_val;
}


static inline void
han_trxm_rx_mem_bank_fifo_full_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_membank_fifo_flags_rssi_tx_power;
    reg_val &= ~RX_FIFO_FULL_MASK;
    if(value)
	    reg_val |= ((1 << RX_FIFO_FULL_SHIFT) & RX_FIFO_FULL_MASK);
    s->regs.trx_membank_fifo_flags_rssi_tx_power = reg_val;
}


static inline void
han_trxm_rx_mem_bank_overflow_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_membank_fifo_flags_rssi_tx_power;
    reg_val &= ~RX_MEMBANK_OFLOW_MASK;
    if(value)
	    reg_val |= ((1 << RX_MEMBANK_OFLOW_SHIFT) & RX_MEMBANK_OFLOW_MASK);
    s->regs.trx_membank_fifo_flags_rssi_tx_power = reg_val;
}


static inline void
han_trxm_rx_mem_bank_full3_flag_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_membank_fifo_flags_rssi_tx_power;
    reg_val &= ~MEMBANK3_FULL_MASK;
    if(value)
	    reg_val |= ((1 << MEMBANK3_FULL_SHIFT) & MEMBANK3_FULL_MASK);
    s->regs.trx_membank_fifo_flags_rssi_tx_power = reg_val;
}


static inline void
han_trxm_rx_mem_bank_full2_flag_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_membank_fifo_flags_rssi_tx_power;
    reg_val &= ~MEMBANK2_FULL_MASK;
    if(value)
	    reg_val |= ((1 << MEMBANK2_FULL_SHIFT) & MEMBANK2_FULL_MASK);
    s->regs.trx_membank_fifo_flags_rssi_tx_power = reg_val;
}


static inline void
han_trxm_rx_mem_bank_full1_flag_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_membank_fifo_flags_rssi_tx_power;
    reg_val &= ~MEMBANK1_FULL_MASK;
    if(value)
	    reg_val |= ((1 << MEMBANK1_FULL_SHIFT) & MEMBANK1_FULL_MASK);
    s->regs.trx_membank_fifo_flags_rssi_tx_power = reg_val;
}


static inline void
han_trxm_rx_mem_bank_full0_flag_set(struct han_trxm_dev *s, bool value)
{
    uint32_t reg_val = s->regs.trx_membank_fifo_flags_rssi_tx_power;
    reg_val &= ~MEMBANK0_FULL_MASK;
    if(value)
	    reg_val |= ((1 << MEMBANK0_FULL_SHIFT) & MEMBANK0_FULL_MASK);
    s->regs.trx_membank_fifo_flags_rssi_tx_power = reg_val;
}

/* ________________________ get accessor functions
 */

static inline uint8_t
han_mac_mac_timeout_strategy_get(struct han_mac_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.mac_lower_ctrl & MAC_TIMEOUT_STRATEGY_MASK) >> MAC_TIMEOUT_STRATEGY_SHIFT);
    return value;
}

static inline uint8_t
han_mac_mac_max_csma_backoffs_get(struct han_mac_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.mac_lower_ctrl & MAC_MAX_CSMA_BACKOFFS_MASK) >> MAC_MAX_CSMA_BACKOFFS_SHIFT);
    return value;
}

static inline uint8_t
han_mac_mac_min_be_get(struct han_mac_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.mac_lower_ctrl & MAC_MIN_BE_MASK) >> MAC_MIN_BE_SHIFT);
    return value;
}

static inline uint8_t
han_mac_mac_max_be_get(struct han_mac_dev *s)
{
    uint8_t value;

    value = (uint8_t)((s->regs.mac_lower_ctrl & MAC_MAX_BE_MASK) >> MAC_MAX_BE_SHIFT);
    return value;
}

static inline bool 
han_mac_mac_csma_ign_rx_busy_get(struct han_mac_dev *s)
{
    return (s->regs.mac_lower_ctrl & (1 << MAC_CSMA_IGN_RX_BUSY_FOR_TX_SHIFT)) ? true : false;
}

static inline bool 
han_mac_mac_ack_en_get(struct han_mac_dev *s)
{
    return (s->regs.mac_lower_ctrl & (1 << MAC_ACK_EN_SHIFT)) ? true : false;
}

static inline bool 
han_mac_lower_mac_reset_get(struct han_mac_dev *s)
{
    return (s->regs.mac_lower_ctrl & (1 << LOWER_MAC_RESET_SHIFT)) ? true : false;
}

static inline bool 
han_mac_lower_mac_bypass_get(struct han_mac_dev *s)
{
    return (s->regs.mac_lower_ctrl & (1 << MAC_BYPASS_SHIFT)) ? true : false;
}

/* ________________________ set accessor functions
 */

static inline void
han_mac_mac_timeout_strategy_set(struct han_mac_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.mac_lower_ctrl;
    reg_val &= ~MAC_TIMEOUT_STRATEGY_MASK;
    reg_val |= ((value << MAC_TIMEOUT_STRATEGY_SHIFT) & MAC_TIMEOUT_STRATEGY_MASK);
    s->regs.mac_lower_ctrl = reg_val;
}

static inline void
han_mac_mac_max_csma_backoffs_set(struct han_mac_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.mac_lower_ctrl;
    reg_val &= ~MAC_MAX_CSMA_BACKOFFS_MASK;
    reg_val |= ((value << MAC_MAX_CSMA_BACKOFFS_SHIFT) & MAC_MAX_CSMA_BACKOFFS_MASK);
    s->regs.mac_lower_ctrl = reg_val;
}

static inline void
han_mac_mac_min_be_set(struct han_mac_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.mac_lower_ctrl;
    reg_val &= ~MAC_MIN_BE_MASK;
    reg_val |= ((value << MAC_MIN_BE_SHIFT) & MAC_MIN_BE_MASK);
    s->regs.mac_lower_ctrl = reg_val;
}

static inline void
han_mac_mac_max_be_set(struct han_mac_dev *s, uint8_t value)
{
    uint32_t reg_val = s->regs.mac_lower_ctrl;
    reg_val &= ~MAC_MAX_BE_MASK;
    reg_val |= ((value << MAC_MAX_BE_SHIFT) & MAC_MAX_BE_MASK);
    s->regs.mac_lower_ctrl = reg_val;
}


static inline void
han_mac_mac_csma_ign_rx_busy_set(struct han_mac_dev *s, bool value)
{
    uint32_t reg_val = s->regs.mac_lower_ctrl;
    reg_val &= ~MAC_CSMA_IGN_RX_BUSY_FOR_TX_MASK;
    if(value)
	    reg_val |= ((1 << MAC_CSMA_IGN_RX_BUSY_FOR_TX_SHIFT) & MAC_CSMA_IGN_RX_BUSY_FOR_TX_MASK);
    s->regs.mac_lower_ctrl = reg_val;
}


static inline void
han_mac_mac_ack_en_set(struct han_mac_dev *s, bool value)
{
    uint32_t reg_val = s->regs.mac_lower_ctrl;
    reg_val &= ~MAC_ACK_EN_MASK;
    if(value)
	    reg_val |= ((1 << MAC_ACK_EN_SHIFT) & MAC_ACK_EN_MASK);
    s->regs.mac_lower_ctrl = reg_val;
}


static inline void
han_mac_lower_mac_reset_set(struct han_mac_dev *s, bool value)
{
    uint32_t reg_val = s->regs.mac_lower_ctrl;
    reg_val &= ~LOWER_MAC_RESET_MASK;
    if(value)
	    reg_val |= ((1 << LOWER_MAC_RESET_SHIFT) & LOWER_MAC_RESET_MASK);
    s->regs.mac_lower_ctrl = reg_val;
}


static inline void
han_mac_lower_mac_bypass_set(struct han_mac_dev *s, bool value)
{
    uint32_t reg_val = s->regs.mac_lower_ctrl;
    reg_val &= ~MAC_BYPASS_MASK;
    if(value)
	    reg_val |= ((1 << MAC_BYPASS_SHIFT) & MAC_BYPASS_MASK);
    s->regs.mac_lower_ctrl = reg_val;
}

/* ________________________ get accessor functions
 */

/* ________________________ set accessor functions
 */

/* ________________________ get accessor functions
 */

/* ________________________ set accessor functions
 */

/* ________________________ get accessor functions
 */

/* ________________________ set accessor functions
 */



#endif

